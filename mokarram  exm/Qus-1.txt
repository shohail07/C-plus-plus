StackType.h :


#ifndef STACKTYPE_H_INCLUDED
#define STACKTYPE_H_INCLUDED
const int max_items = 5;
class FullStack
{
};
class EmptyStack
{
};
template<class T>
class StackType
{
private:
    int top;
    T info[max_items];
public:
    StackType();
    bool isFull();
    bool isEmpty();
    void Push(T);
    void Pop();
    T Top();
};
#endif // STACKTYPE_H_INCLUDED




StackType.cpp :

#include"StackType.h"

template<class T>
StackType<T>::StackType():top(-1) {}

template<class T>
bool StackType<T>::isFull()
{
    return top==max_items-1;
}

template<class T>
bool StackType<T>::isEmpty()
{
    return top==-1;
}

template<class T>
void StackType<T>::Push(T x)
{
    if(isFull())
        throw FullStack();
    top++;
    info[top] = x;
}

template<class T>
void StackType<T>::Pop()
{
    if(isEmpty())
        throw EmptyStack();
    top--;
}

template<class T>
T StackType<T>::Top()
{
    if(isEmpty())
        throw EmptyStack();
    return info[top];
}




main.cpp :

#include <iostream>
using namespace std;

int main()
{
    int a,b,x,on,sum = 0,counter = 0;

    cin >> a;
    cin >> b;
    cin >> x;

    stack<int> AOb;
    stack<int> BOb;

    for(int i=0; i<a; i++)
    {
        cin >> on;
        AOb.push(on);
    }

    for(int i=0; i<b; i++)
    {

        cin >> on;
        BOb.push(on);

    }


    while(true)
    {
        if(sum < x)
        {
            if(AOb.top() <= BOb.top())
            {
                sum += AOb.top();
                if(sum <=x )
                {
                    AOb.pop();
                    counter =counter + 1;
                }

                else
                    break;
            }

            else
            {
                sum += BOb.top();
                if(sum <=x )
                {
                    BOb.pop();
                    counter =counter+1;
                }

                else
                    break;

            }
        }
        else
            break;
        cout << counter;


    }
